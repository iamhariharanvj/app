Activity.xml:-



<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp">

    <SurfaceView
        android:id="@+id/surfaceView"
        android:layout_width="match_parent"
        android:layout_height="300dp"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="16dp" />

    <TextView
        android:id="@+id/mediaController"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/media_controller_2"
        android:textSize="20sp"
        android:textStyle="bold"
        android:layout_above="@id/surfaceView"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="16dp" />

    <VideoView
        android:id="@+id/videoView"
        android:layout_width="match_parent"
        android:layout_height="300dp"
        android:layout_below="@id/surfaceView"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="16dp" />

    <LinearLayout
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@id/videoView"
        android:layout_centerHorizontal="true"
        android:orientation="horizontal">

        <Button
            android:id="@+id/button_record"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/record"
            android:layout_marginTop="16dp"
            android:layout_marginEnd="8dp"
            android:onClick="toggleRecording" />

        <Button
            android:id="@+id/button_playback"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/playback"
            android:visibility="gone"
            android:onClick="playbackVideo" />
    </LinearLayout>

    <Button
        android:id="@+id/button_exit"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/exit"
        android:layout_below="@id/button_playback"
        android:layout_marginTop="16dp"
        android:layout_centerHorizontal="true"
        android:visibility="gone"
        android:onClick="exitApp"
        tools:ignore="NotSibling" />

</RelativeLayout>




MainActivity.xml:-




package com.example.media2;

import android.media.MediaPlayer;
import android.media.MediaRecorder;
import android.os.Bundle;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;
import android.widget.VideoView;

import androidx.appcompat.app.AppCompatActivity;

import java.io.IOException;

public class MainActivity extends AppCompatActivity implements SurfaceHolder.Callback {

    private MediaRecorder mediaRecorder;
    private SurfaceHolder surfaceHolder;
    private Button buttonRecord;
    private Button buttonPlayback;
    private boolean isRecording = false;
    private String outputFile;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        SurfaceView surfaceView = findViewById(R.id.surfaceView);
        surfaceHolder = surfaceView.getHolder();
        surfaceHolder.addCallback(this);

        buttonRecord = findViewById(R.id.button_record);
        buttonPlayback = findViewById(R.id.button_playback);

        outputFile = getExternalCacheDir().getAbsolutePath() + "/recorded_video.mp4";
    }



    @Override
    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
        surfaceHolder = holder;
    }

    @Override
    public void surfaceDestroyed(SurfaceHolder holder) {
        if (isRecording) {
            stopRecording();
        }
        releaseMediaRecorder();
    }

    public void toggleRecording(View view) {
        if (!isRecording) {
            startRecording();
        } else {
            stopRecording();
        }
    }

    private void startRecording() {
        if (prepareMediaRecorder()) {
            try {
                mediaRecorder.start();
                isRecording = true;
                buttonRecord.setText("Stop Recording");
                buttonPlayback.setVisibility(View.GONE);
                Toast.makeText(this, "Recording started", Toast.LENGTH_SHORT).show();
            } catch (IllegalStateException e) {
                e.printStackTrace();
                releaseMediaRecorder();
                isRecording = false;
                buttonRecord.setText("Record");
                buttonPlayback.setVisibility(View.VISIBLE);
                Toast.makeText(this, "Failed to start recording", Toast.LENGTH_SHORT).show();
            }
        } else {
            Toast.makeText(this, "Failed to prepare MediaRecorder", Toast.LENGTH_SHORT).show();
        }
    }

    private void stopRecording() {
        try {
            mediaRecorder.stop();
            mediaRecorder.reset();
            mediaRecorder.release();
            mediaRecorder = null;
            isRecording = false;
            buttonRecord.setText("Record");
            buttonPlayback.setVisibility(View.VISIBLE);
            Toast.makeText(this, "Recording stopped", Toast.LENGTH_SHORT).show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private boolean prepareMediaRecorder() {
        mediaRecorder = new MediaRecorder();
        mediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
        mediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
        mediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);
        mediaRecorder.setVideoSize(320, 240); // Adjust size as needed
        mediaRecorder.setVideoFrameRate(30);
        mediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264);
        mediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);
        mediaRecorder.setOutputFile(outputFile);
        mediaRecorder.setPreviewDisplay(surfaceHolder.getSurface());
        mediaRecorder.setOrientationHint(90); // Set orientation
        try {
            mediaRecorder.prepare();
            return true;
        } catch (IOException e) {
            e.printStackTrace();
            releaseMediaRecorder();
            return false;
        }
    }

    public void playbackVideo(View view) {
        VideoView videoView = findViewById(R.id.videoView);
        videoView.setVideoPath(outputFile);
        videoView.start();

        // Show the Exit button when video playback starts
        Button buttonExit = findViewById(R.id.button_exit);
        buttonExit.setVisibility(View.VISIBLE);
    }

    @Override
    public void surfaceCreated(SurfaceHolder holder) {
        surfaceHolder = holder;

        // Set the preview display for the media recorder
        if (mediaRecorder != null) {
            mediaRecorder.setPreviewDisplay(surfaceHolder.getSurface());
        }
    }

    private void releaseMediaRecorder() {
        if (mediaRecorder != null) {
            mediaRecorder.reset();
            mediaRecorder.release();
            mediaRecorder = null;
        }
    }
    public void exitApp(View view) {
        finish(); // Close the activity
    }
}





AndroidManifest.xml:-




<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.media2">

    <!-- Permissions -->
    <uses-permission android:name="android.permission.CAMERA" />
    <uses-permission android:name="android.permission.RECORD_AUDIO" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />

    <!-- Camera feature -->
    <uses-feature android:name="android.hardware.camera" android:required="false" />

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.Media2">
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>





